{
	"info": {
		"_postman_id": "37a657c3-b2a5-4b7f-bd44-85cfe2a71d5f",
		"name": "Books",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Status Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(pm.response.json())\r",
							"\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql('OK');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"id": "6c610d08-ab59-4e5c-9aa0-2ead31f09296"
					}
				}
			],
			"id": "0b7f78a0-2cd6-4a09-b7e2-d56f28787115",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://simple-books-api.glitch.me/status"
			},
			"response": []
		},
		{
			"name": "List of Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"let queryParams = pm.request.url.query.toObject();\r",
							"\r",
							"if (queryParams.type) {\r",
							"    pm.test(\"Query parameter 'type' is correct\", function () {\r",
							"        pm.expect(queryParams.type).to.oneOf(['fiction', 'non-fiction']);\r",
							"    });\r",
							"}\r",
							"\r",
							"if (queryParams.limit) {\r",
							"    pm.test(\"Query parameter 'limit' is a number between 1 and 20\", function () {\r",
							"        pm.expect(parseInt(queryParams.limit)).to.be.within(1, 20);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"Set bookId variable to an available book\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"\r",
							"    var availableBook = jsonData.find(book => book.available === true);\r",
							"    \r",
							"    if (availableBook) {\r",
							"        pm.environment.set(\"SingleAvailableBookId\", availableBook.id);\r",
							"        pm.expect(pm.environment.get(\"SingleAvailableBookId\")).to.equal(availableBook.id);\r",
							"    } else {\r",
							"        pm.expect.fail(\"No available books found\");\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"id": "7c9b4e9a-eeae-404e-8f79-b37948516bf3"
					}
				}
			],
			"id": "6d4d12a5-8e44-42d6-8af0-a46442905ba4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books?type=fiction&limit=12",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction"
						},
						{
							"key": "limit",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Single Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 and response has book details\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"id": "e5914b32-6ae1-4437-b240-821ef5402012"
					}
				}
			],
			"id": "0c0befc1-7be3-4427-9df8-a5d946fdafad",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books/:bookId",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books",
						":bookId"
					],
					"variable": [
						{
							"id": "aa73f01a-6f83-4788-b794-ff4da9de586a",
							"key": "bookId",
							"value": "{{SingleAvailableBookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "API Client Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful registration should return 201 status\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain access token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.accessToken).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Access token should not be empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.accessToken).to.not.be.empty;\r",
							"    \r",
							"    // Save the access token to an environment variable\r",
							"    pm.environment.set(\"accessToken\", jsonData.accessToken);\r",
							"});\r",
							"pm.test(\"Handle already registered error\", function () {\r",
							"    if (pm.response.code === 409) {\r",
							"        pm.expect(pm.response.text()).to.include(\"API client already registered.\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"id": "52994448-94b7-4758-abbe-ecfbfb454e84"
					}
				}
			],
			"id": "4f155275-d267-4eff-8eec-8f6022a59b99",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{$randomUserName}}\",\r\n   \"clientEmail\": \"{{$randomUserName}}@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://simple-books-api.glitch.me/api-clients"
			},
			"response": []
		},
		{
			"name": "Submit an Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order submission is successful\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('created', true);\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('orderId').and.to.be.a('string');\r",
							"    pm.expect(jsonData.orderId).to.not.be.empty;\r",
							"\r",
							"    pm.environment.set(\"lastOrderId\", jsonData.orderId);\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"id": "375183ef-282f-4b9d-b2d0-12110e6f9144"
					}
				}
			],
			"id": "9802bb4e-9d29-4d8a-b0c9-2c9a45e87ac4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://simple-books-api.glitch.me/orders"
			},
			"response": []
		},
		{
			"name": "Get An Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has all required order fields\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(Array.isArray(jsonData)).to.be.false;\r",
							"\r",
							"    pm.expect(jsonData).to.have.property('id').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('bookId').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('customerName').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('createdBy').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('quantity').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('timestamp').that.is.a('number');\r",
							"    pm.expect(jsonData.timestamp).to.be.a('number');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"id": "0b656e71-5640-476e-adf6-ecb42c396543"
					}
				}
			],
			"id": "d590f7d8-8f2d-498e-837a-250870072473",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/:orderId",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"id": "11998248-177d-4347-838f-a696488f4817",
							"key": "orderId",
							"value": "{{lastOrderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update An Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has all required order fields\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(Array.isArray(jsonData)).to.be.false;\r",
							"\r",
							"    pm.expect(jsonData).to.have.property('id').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('bookId').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('customerName').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('createdBy').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('quantity').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('timestamp').that.is.a('number');\r",
							"    pm.expect(jsonData.timestamp).to.be.a('number');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"id": "ab552477-5f49-4034-b9d5-146477cb5970"
					}
				}
			],
			"id": "b4bbd18c-872a-4046-86f9-29ca07d83ffc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/:orderId",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"id": "ad5f4e26-d730-4209-a442-91086d747f42",
							"key": "orderId",
							"value": "{{lastOrderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each order should have all required properties\", function () {\r",
							"    const orders = pm.response.json();\r",
							"    orders.forEach((order) => {\r",
							"        pm.expect(order).to.have.keys(['id', 'bookId', 'customerName', 'createdBy', 'quantity', 'timestamp']);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Data types are correct for each property\", function () {\r",
							"    const orders = pm.response.json();\r",
							"    orders.forEach((order) => {\r",
							"        pm.expect(order.id).to.be.a('string');\r",
							"        pm.expect(order.bookId).to.be.a('number');\r",
							"        pm.expect(order.customerName).to.be.a('string');\r",
							"        pm.expect(order.createdBy).to.be.a('string');\r",
							"        pm.expect(order.quantity).to.be.a('number');\r",
							"        pm.expect(order.timestamp).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Timestamps are valid and correctly ordered\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var previousTimestamp = 0;\r",
							"    jsonData.forEach((order) => {\r",
							"        pm.expect(order.timestamp).to.be.above(previousTimestamp);\r",
							"        previousTimestamp = order.timestamp;\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"id": "95ec8605-87cd-4c32-921b-b3d02e0d27d1"
					}
				}
			],
			"id": "c7b190ab-cdc2-4747-be6b-e81b4cd0cf11",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "https://simple-books-api.glitch.me/orders"
			},
			"response": []
		},
		{
			"name": "Delete An Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response is either 204 No Content or 404 Not Found\", function () {\r",
							"\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
							"\r",
							"    if (pm.response.code === 204) {\r",
							"        pm.expect(pm.response.text()).to.be.empty;\r",
							"    } \r",
							"\r",
							"    if (pm.response.code === 404) {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property('error');\r",
							"        pm.expect(jsonData.error).to.be.a('string');\r",
							"        pm.expect(jsonData.error).to.eql(\"No order with id RyORo1Yjo89inmsm6s9bZ.\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"id": "3ff39ef9-7419-406e-a506-6d12da02a331"
					}
				}
			],
			"id": "313cfcb0-c7fd-4284-b8e7-cfe6274b0943",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{accessToken}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/:orderId",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"id": "302bfe3d-4358-4d92-a77f-d17eb50fe287",
							"key": "orderId",
							"value": "{{lastOrderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "700f0996-250d-4350-a04d-2b2918ebf065"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "40def6f3-5485-45cc-b542-dbf2349a8b65"
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		}
	]
}